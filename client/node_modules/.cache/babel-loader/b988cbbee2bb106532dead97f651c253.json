{"ast":null,"code":"var _jsxFileName = \"/home/john/Code/Testing/graphql-books/client/src/components/InfoSection.js\";\nimport React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nconst GET_BOOK = gql`\n\tquery GetBook($currentBook: ID!) {\n\t\tbook(id: $currentBook) {\n\t\t\tname\n\t\t\tgenre\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tage\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst InfoSection = ({\n  currentBook\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOK, {\n    variables: {\n      currentBook\n    }\n  });\n  if (loading) return loading;\n  if (error) return `Error! ${error}`;\n  console.log(data);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }\n  }, data.book.name));\n};\n\nexport default InfoSection;","map":{"version":3,"sources":["/home/john/Code/Testing/graphql-books/client/src/components/InfoSection.js"],"names":["React","useQuery","gql","GET_BOOK","InfoSection","currentBook","loading","error","data","variables","console","log","book","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;;;;CAArB;;AAaA,MAAME,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,QAAD,EAAW;AACnDM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADwC,GAAX,CAAzC;AAIA,MAAIC,OAAJ,EAAa,OAAOA,OAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAM,EAAvB;AAEXG,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACI,IAAL,CAAUC,IAAf,CADD,CADD;AAKA,CAfD;;AAiBA,eAAeT,WAAf","sourcesContent":["import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nconst GET_BOOK = gql`\n\tquery GetBook($currentBook: ID!) {\n\t\tbook(id: $currentBook) {\n\t\t\tname\n\t\t\tgenre\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tage\n\t\t\t}\n\t\t}\n\t}\n`\n\nconst InfoSection = ({ currentBook }) => {\n\tconst { loading, error, data } = useQuery(GET_BOOK, {\n\t\tvariables: { currentBook },\n\t})\n\n\tif (loading) return loading\n\tif (error) return `Error! ${error}`\n\n\tconsole.log(data)\n\n\treturn (\n\t\t<div className=\"info\">\n\t\t\t<h2>{data.book.name}</h2>\n\t\t</div>\n\t)\n}\n\nexport default InfoSection\n"]},"metadata":{},"sourceType":"module"}