{"ast":null,"code":"var _jsxFileName = \"/home/john/Code/Testing/graphql-books/client/src/components/InfoSection.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nconst GET_BOOK = gql`\n\tquery GetBook($currentBook: ID) {\n\t\tbook(id: $currentBook) {\n\t\t\tname\n\t\t\tgenre\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tbooks {\n\t\t\t\t\tname\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst InfoSection = ({\n  currentBook\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BOOK, {\n    variables: {\n      currentBook\n    },\n    pollInterval: 500\n  });\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 22\n    }\n  });\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 20\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }\n  }, data.book.name), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }\n  }, \"By \", data.book.author.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"Genre:\"), \" \", data.book.genre), /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }, \"Other books by \", data.book.author.name, \":\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, data.book.author.books.map(book => /*#__PURE__*/React.createElement(\"li\", {\n    key: book.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 6\n    }\n  }, book.name))));\n};\n\nexport default InfoSection;","map":{"version":3,"sources":["/home/john/Code/Testing/graphql-books/client/src/components/InfoSection.js"],"names":["React","useEffect","useQuery","gql","GET_BOOK","InfoSection","currentBook","loading","error","data","variables","pollInterval","book","name","author","genre","books","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;;;;;;;CAArB;;AAgBA,MAAME,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACxC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,QAAD,EAAW;AACnDM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF,KADwC;AAEnDK,IAAAA,YAAY,EAAE;AAFqC,GAAX,CAAzC;AAKA,MAAIJ,OAAJ,EAAa,oBAAO;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,sBACC;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,IAAI,CAACG,IAAL,CAAUC,IAAf,CADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQJ,IAAI,CAACG,IAAL,CAAUE,MAAV,CAAiBD,IAAzB,CAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,OAC0BJ,IAAI,CAACG,IAAL,CAAUG,KADpC,CAHD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoBN,IAAI,CAACG,IAAL,CAAUE,MAAV,CAAiBD,IAArC,MAND,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEJ,IAAI,CAACG,IAAL,CAAUE,MAAV,CAAiBE,KAAjB,CAAuBC,GAAvB,CAA2BL,IAAI,iBAC/B;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACM,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBN,IAAI,CAACC,IAAxB,CADA,CADF,CAPD,CADD;AAeA,CAxBD;;AA0BA,eAAeR,WAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nconst GET_BOOK = gql`\n\tquery GetBook($currentBook: ID) {\n\t\tbook(id: $currentBook) {\n\t\t\tname\n\t\t\tgenre\n\t\t\tauthor {\n\t\t\t\tname\n\t\t\t\tbooks {\n\t\t\t\t\tname\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\nconst InfoSection = ({ currentBook }) => {\n\tconst { loading, error, data } = useQuery(GET_BOOK, {\n\t\tvariables: { currentBook },\n\t\tpollInterval: 500,\n\t})\n\n\tif (loading) return <div className=\"info\"></div>\n\tif (error) return <div className=\"info\"></div>\n\n\treturn (\n\t\t<div className=\"info\">\n\t\t\t<h2>{data.book.name}</h2>\n\t\t\t<h5>By {data.book.author.name}</h5>\n\t\t\t<p>\n\t\t\t\t<strong>Genre:</strong> {data.book.genre}\n\t\t\t</p>\n\t\t\t<h6>Other books by {data.book.author.name}:</h6>\n\t\t\t<ul>\n\t\t\t\t{data.book.author.books.map(book => (\n\t\t\t\t\t<li key={book.id}>{book.name}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default InfoSection\n"]},"metadata":{},"sourceType":"module"}